name: Deploy Space Invaders Game Online

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Create web game
      run: |
        mkdir -p public
        
        # Create a complete HTML5 Space Invaders game
        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>üöÄ Ultimate Space Invaders üõ∏</title>
            <style>
                body {
                    margin: 0;
                    padding: 20px;
                    background: linear-gradient(45deg, #000011, #000033);
                    color: #fff;
                    font-family: 'Courier New', monospace;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    min-height: 100vh;
                    overflow-x: hidden;
                }
                .container {
                    text-align: center;
                    max-width: 1200px;
                }
                h1 {
                    color: #00ff00;
                    text-shadow: 0 0 20px #00ff00;
                    font-size: 2.5em;
                    margin-bottom: 10px;
                    animation: glow 2s ease-in-out infinite alternate;
                }
                @keyframes glow {
                    from { text-shadow: 0 0 20px #00ff00; }
                    to { text-shadow: 0 0 30px #00ff00, 0 0 40px #00ff00; }
                }
                canvas {
                    border: 2px solid #00ffff;
                    background: #000;
                    box-shadow: 0 0 20px rgba(0, 255, 255, 0.5);
                    cursor: crosshair;
                }
                .ui {
                    display: flex;
                    justify-content: space-between;
                    width: 1000px;
                    margin: 10px 0;
                    background: rgba(0, 0, 0, 0.7);
                    padding: 10px;
                    border: 1px solid #00ffff;
                    border-radius: 5px;
                }
                .stat {
                    font-size: 18px;
                    color: #00ff00;
                }
                .controls {
                    margin-top: 20px;
                    background: rgba(0, 0, 0, 0.7);
                    padding: 15px;
                    border: 1px solid #00ffff;
                    border-radius: 5px;
                    max-width: 600px;
                }
                .controls h3 {
                    color: #ffff00;
                    margin-top: 0;
                }
                .control-item {
                    margin: 8px 0;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                .key {
                    background: #333;
                    padding: 5px 10px;
                    border: 1px solid #666;
                    border-radius: 3px;
                    font-family: monospace;
                    color: #fff;
                }
                .message {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(0, 0, 0, 0.9);
                    padding: 30px;
                    border: 2px solid #ff0000;
                    border-radius: 10px;
                    text-align: center;
                    display: none;
                    z-index: 100;
                }
                .message h2 {
                    color: #ff0000;
                    margin-top: 0;
                }
                .message.win h2 {
                    color: #00ff00;
                }
                button {
                    background: #333;
                    color: #fff;
                    border: 2px solid #00ffff;
                    padding: 10px 20px;
                    cursor: pointer;
                    border-radius: 5px;
                    font-family: 'Courier New', monospace;
                    font-size: 16px;
                    transition: all 0.3s;
                }
                button:hover {
                    background: #00ffff;
                    color: #000;
                    box-shadow: 0 0 10px #00ffff;
                }
                .instructions {
                    margin-top: 20px;
                    color: #888;
                    font-style: italic;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ ULTIMATE SPACE INVADERS üõ∏</h1>
                
                <div class="ui">
                    <div class="stat">Score: <span id="score">0</span></div>
                    <div class="stat">Lives: <span id="lives">3</span></div>
                    <div class="stat">Wave: <span id="wave">1</span></div>
                    <div class="stat">Level: <span id="level">1</span></div>
                </div>
                
                <canvas id="gameCanvas" width="1000" height="700"></canvas>
                
                <div class="controls">
                    <h3>üéÆ CONTROLS</h3>
                    <div class="control-item">
                        <span>Move Left:</span>
                        <span class="key">‚Üê Left Arrow</span>
                    </div>
                    <div class="control-item">
                        <span>Move Right:</span>
                        <span class="key">‚Üí Right Arrow</span>
                    </div>
                    <div class="control-item">
                        <span>Shoot:</span>
                        <span class="key">SPACEBAR</span>
                    </div>
                    <div class="control-item">
                        <span>Pause:</span>
                        <span class="key">P</span>
                    </div>
                </div>
                
                <div class="instructions">
                    Click on the game canvas to focus, then use keyboard controls
                </div>
            </div>
            
            <div id="gameOverMessage" class="message">
                <h2>GAME OVER!</h2>
                <p>Final Score: <span id="finalScore">0</span></p>
                <p>Wave Reached: <span id="finalWave">1</span></p>
                <button onclick="restartGame()">üîÑ PLAY AGAIN</button>
            </div>
            
            <div id="winMessage" class="message win">
                <h2>WAVE CLEARED!</h2>
                <p>Preparing next wave...</p>
            </div>

            <script>
                // Game setup
                const canvas = document.getElementById('gameCanvas');
                const ctx = canvas.getContext('2d');
                
                // Game state
                let gameState = {
                    score: 0,
                    lives: 3,
                    wave: 1,
                    level: 1,
                    gameOver: false,
                    paused: false,
                    combo: 0,
                    maxCombo: 0
                };
                
                // Player
                let player = {
                    x: canvas.width / 2 - 25,
                    y: canvas.height - 80,
                    width: 50,
                    height: 30,
                    speed: 8,
                    color: '#00ffff'
                };
                
                // Game objects
                let bullets = [];
                let alienBullets = [];
                let aliens = [];
                let particles = [];
                let stars = [];
                let powerups = [];
                let explosions = [];
                
                // Timing
                let lastShot = 0;
                let lastAlienShot = 0;
                let shotCooldown = 150;
                
                // Input handling
                let keys = {};
                
                // Audio context for sound effects
                let audioCtx;
                
                // Initialize background stars
                function initStars() {
                    stars = [];
                    for (let i = 0; i < 200; i++) {
                        stars.push({
                            x: Math.random() * canvas.width,
                            y: Math.random() * canvas.height,
                            size: Math.random() * 2 + 0.5,
                            speed: Math.random() * 3 + 1,
                            brightness: Math.random() * 0.5 + 0.5
                        });
                    }
                }
                
                // Create alien formation
                function createAliens() {
                    aliens = [];
                    const rows = Math.min(5 + Math.floor(gameState.wave / 3), 8);
                    const cols = Math.min(8 + Math.floor(gameState.wave / 2), 12);
                    
                    for (let row = 0; row < rows; row++) {
                        for (let col = 0; col < cols; col++) {
                            const alienType = row === 0 ? 'boss' : row < 2 ? 'fast' : 'basic';
                            aliens.push({
                                x: 60 + col * 70,
                                y: 60 + row * 50,
                                width: 35,
                                height: 25,
                                type: alienType,
                                health: alienType === 'boss' ? 3 : alienType === 'fast' ? 2 : 1,
                                maxHealth: alienType === 'boss' ? 3 : alienType === 'fast' ? 2 : 1,
                                points: alienType === 'boss' ? 50 : alienType === 'fast' ? 30 : 10,
                                moveX: 1 + gameState.wave * 0.2,
                                moveY: 0,
                                shootTimer: Math.random() * 120,
                                color: alienType === 'boss' ? '#ff0000' : alienType === 'fast' ? '#ff8800' : '#00ff00'
                            });
                        }
                    }
                }
                
                // Event listeners
                document.addEventListener('keydown', (e) => {
                    keys[e.code] = true;
                    if (e.code === 'Space') {
                        e.preventDefault();
                        shoot();
                    }
                    if (e.code === 'KeyP') {
                        togglePause();
                    }
                });
                
                document.addEventListener('keyup', (e) => {
                    keys[e.code] = false;
                });
                
                // Canvas focus
                canvas.tabIndex = 1;
                canvas.addEventListener('click', () => {
                    canvas.focus();
                    if (!audioCtx) {
                        audioCtx = new (window.AudioContext || window.webkitAudioContext)();
                    }
                });
                
                // Sound effects
                function playSound(frequency, duration, type = 'sine') {
                    if (!audioCtx) return;
                    
                    const oscillator = audioCtx.createOscillator();
                    const gainNode = audioCtx.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(audioCtx.destination);
                    
                    oscillator.frequency.value = frequency;
                    oscillator.type = type;
                    
                    gainNode.gain.setValueAtTime(0.1, audioCtx.currentTime);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + duration);
                    
                    oscillator.start(audioCtx.currentTime);
                    oscillator.stop(audioCtx.currentTime + duration);
                }
                
                function shoot() {
                    if (gameState.gameOver || gameState.paused) return;
                    const now = Date.now();
                    if (now - lastShot < shotCooldown) return;
                    
                    bullets.push({
                        x: player.x + player.width / 2 - 2,
                        y: player.y,
                        width: 4,
                        height: 15,
                        speed: 12,
                        color: '#ffff00'
                    });
                    
                    playSound(800, 0.1, 'square');
                    lastShot = now;
                }
                
                function togglePause() {
                    gameState.paused = !gameState.paused;
                }
                
                function createParticle(x, y, color, count = 8) {
                    for (let i = 0; i < count; i++) {
                        particles.push({
                            x: x,
                            y: y,
                            vx: (Math.random() - 0.5) * 8,
                            vy: (Math.random() - 0.5) * 8,
                            color: color,
                            life: 40 + Math.random() * 20,
                            maxLife: 60,
                            size: Math.random() * 3 + 1
                        });
                    }
                }
                
                function createExplosion(x, y, size = 1) {
                    explosions.push({
                        x: x,
                        y: y,
                        size: size,
                        maxSize: size * 30,
                        life: 20,
                        color: size > 1 ? '#ff0000' : '#ffaa00'
                    });
                }
                
                function update() {
                    if (gameState.gameOver || gameState.paused) return;
                    
                    // Player movement
                    if (keys['ArrowLeft'] && player.x > 0) {
                        player.x -= player.speed;
                    }
                    if (keys['ArrowRight'] && player.x < canvas.width - player.width) {
                        player.x += player.speed;
                    }
                    
                    // Update bullets
                    bullets = bullets.filter(bullet => {
                        bullet.y -= bullet.speed;
                        return bullet.y > -bullet.height;
                    });
                    
                    // Update alien bullets
                    alienBullets = alienBullets.filter(bullet => {
                        bullet.y += bullet.speed;
                        return bullet.y < canvas.height + bullet.height;
                    });
                    
                    // Alien movement and shooting
                    let moveDown = false;
                    for (let alien of aliens) {
                        alien.x += alien.moveX;
                        if (alien.x <= 0 || alien.x >= canvas.width - alien.width) {
                            moveDown = true;
                        }
                        
                        // Alien shooting
                        alien.shootTimer--;
                        if (alien.shootTimer <= 0 && Math.random() < 0.02) {
                            alienBullets.push({
                                x: alien.x + alien.width / 2,
                                y: alien.y + alien.height,
                                width: 3,
                                height: 8,
                                speed: 4 + gameState.wave * 0.5,
                                color: alien.color
                            });
                            alien.shootTimer = 60 + Math.random() * 120;
                        }
                    }
                    
                    if (moveDown) {
                        for (let alien of aliens) {
                            alien.moveX *= -1;
                            alien.y += 25;
                        }
                    }
                    
                    // Player bullet vs alien collision
                    for (let i = bullets.length - 1; i >= 0; i--) {
                        for (let j = aliens.length - 1; j >= 0; j--) {
                            if (bullets[i] && aliens[j] &&
                                bullets[i].x < aliens[j].x + aliens[j].width &&
                                bullets[i].x + bullets[i].width > aliens[j].x &&
                                bullets[i].y < aliens[j].y + aliens[j].height &&
                                bullets[i].y + bullets[i].height > aliens[j].y) {
                                
                                aliens[j].health--;
                                createParticle(aliens[j].x + aliens[j].width/2, aliens[j].y + aliens[j].height/2, aliens[j].color);
                                bullets.splice(i, 1);
                                
                                if (aliens[j].health <= 0) {
                                    gameState.score += aliens[j].points;
                                    gameState.combo++;
                                    if (gameState.combo > gameState.maxCombo) {
                                        gameState.maxCombo = gameState.combo;
                                    }
                                    
                                    createExplosion(aliens[j].x + aliens[j].width/2, aliens[j].y + aliens[j].height/2, 
                                                  aliens[j].type === 'boss' ? 2 : 1);
                                    playSound(300, 0.2, 'sawtooth');
                                    aliens.splice(j, 1);
                                }
                                break;
                            }
                        }
                    }
                    
                    // Alien bullet vs player collision
                    for (let i = alienBullets.length - 1; i >= 0; i--) {
                        if (alienBullets[i] &&
                            alienBullets[i].x < player.x + player.width &&
                            alienBullets[i].x + alienBullets[i].width > player.x &&
                            alienBullets[i].y < player.y + player.height &&
                            alienBullets[i].y + alienBullets[i].height > player.y) {
                            
                            gameState.lives--;
                            gameState.combo = 0;
                            createParticle(player.x + player.width/2, player.y + player.height/2, '#ff0000', 12);
                            createExplosion(player.x + player.width/2, player.y + player.height/2, 1.5);
                            playSound(150, 0.5, 'sawtooth');
                            alienBullets.splice(i, 1);
                            
                            if (gameState.lives <= 0) {
                                gameOver();
                            }
                            break;
                        }
                    }
                    
                    // Update particles
                    particles = particles.filter(particle => {
                        particle.x += particle.vx;
                        particle.y += particle.vy;
                        particle.vx *= 0.98;
                        particle.vy *= 0.98;
                        particle.life--;
                        return particle.life > 0;
                    });
                    
                    // Update explosions
                    explosions = explosions.filter(explosion => {
                        explosion.size += (explosion.maxSize - explosion.size) * 0.2;
                        explosion.life--;
                        return explosion.life > 0;
                    });
                    
                    // Update stars
                    for (let star of stars) {
                        star.y += star.speed;
                        if (star.y > canvas.height) {
                            star.y = -5;
                            star.x = Math.random() * canvas.width;
                        }
                    }
                    
                    // Check win condition
                    if (aliens.length === 0) {
                        nextWave();
                    }
                    
                    // Check lose condition (aliens reach bottom)
                    for (let alien of aliens) {
                        if (alien.y + alien.height >= player.y) {
                            gameState.lives = 0;
                            gameOver();
                            break;
                        }
                    }
                    
                    // Update UI
                    updateUI();
                }
                
                function draw() {
                    // Clear canvas with gradient
                    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
                    gradient.addColorStop(0, '#000011');
                    gradient.addColorStop(1, '#000033');
                    ctx.fillStyle = gradient;
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    
                    // Draw stars
                    ctx.fillStyle = '#ffffff';
                    for (let star of stars) {
                        ctx.globalAlpha = star.brightness;
                        ctx.beginPath();
                        ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
                        ctx.fill();
                    }
                    ctx.globalAlpha = 1;
                    
                    // Draw player
                    ctx.fillStyle = player.color;
                    ctx.beginPath();
                    ctx.moveTo(player.x + player.width/2, player.y);
                    ctx.lineTo(player.x, player.y + player.height);
                    ctx.lineTo(player.x + player.width/4, player.y + player.height - 5);
                    ctx.lineTo(player.x + player.width*3/4, player.y + player.height - 5);
                    ctx.lineTo(player.x + player.width, player.y + player.height);
                    ctx.closePath();
                    ctx.fill();
                    
                    // Player engine glow
                    ctx.fillStyle = '#ffff00';
                    ctx.fillRect(player.x + player.width/3, player.y + player.height - 3, player.width/3, 3);
                    
                    // Draw bullets
                    for (let bullet of bullets) {
                        ctx.fillStyle = bullet.color;
                        ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
                        
                        // Bullet trail
                        ctx.fillStyle = bullet.color + '66';
                        ctx.fillRect(bullet.x, bullet.y + bullet.height, bullet.width, bullet.height);
                    }
                    
                    // Draw alien bullets
                    for (let bullet of alienBullets) {
                        ctx.fillStyle = bullet.color;
                        ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
                    }
                    
                    // Draw aliens
                    for (let alien of aliens) {
                        // Health-based color intensity
                        const healthRatio = alien.health / alien.maxHealth;
                        const alpha = Math.floor(healthRatio * 255).toString(16).padStart(2, '0');
                        ctx.fillStyle = alien.color + alpha;
                        
                        // Alien body
                        ctx.fillRect(alien.x, alien.y, alien.width, alien.height);
                        
                        // Alien details
                        ctx.fillStyle = '#ffffff';
                        ctx.fillRect(alien.x + 5, alien.y + 5, 6, 6);
                        ctx.fillRect(alien.x + alien.width - 11, alien.y + 5, 6, 6);
                        
                        // Health bar for damaged aliens
                        if (alien.health < alien.maxHealth) {
                            const barWidth = alien.width;
                            const barHeight = 4;
                            ctx.fillStyle = '#ff0000';
                            ctx.fillRect(alien.x, alien.y - 8, barWidth, barHeight);
                            ctx.fillStyle = '#00ff00';
                            ctx.fillRect(alien.x, alien.y - 8, barWidth * healthRatio, barHeight);
                        }
                    }
                    
                    // Draw particles
                    for (let particle of particles) {
                        const alpha = particle.life / particle.maxLife;
                        ctx.globalAlpha = alpha;
                        ctx.fillStyle = particle.color;
                        ctx.beginPath();
                        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                        ctx.fill();
                    }
                    ctx.globalAlpha = 1;
                    
                    // Draw explosions
                    for (let explosion of explosions) {
                        const alpha = explosion.life / 20;
                        ctx.globalAlpha = alpha;
                        ctx.strokeStyle = explosion.color;
                        ctx.lineWidth = 3;
                        ctx.beginPath();
                        ctx.arc(explosion.x, explosion.y, explosion.size, 0, Math.PI * 2);
                        ctx.stroke();
                    }
                    ctx.globalAlpha = 1;
                    
                    // Draw pause overlay
                    if (gameState.paused) {
                        ctx.fillStyle = 'rgba(0, 0, 0, 0.7)';
                        ctx.fillRect(0, 0, canvas.width, canvas.height);
                        ctx.fillStyle = '#ffff00';
                        ctx.font = '48px Courier New';
                        ctx.textAlign = 'center';
                        ctx.fillText('PAUSED', canvas.width/2, canvas.height/2);
                        ctx.font = '24px Courier New';
                        ctx.fillText('Press P to continue', canvas.width/2, canvas.height/2 + 50);
                        ctx.textAlign = 'left';
                    }
                }
                
                function updateUI() {
                    document.getElementById('score').textContent = gameState.score.toLocaleString();
                    document.getElementById('lives').textContent = gameState.lives;
                    document.getElementById('wave').textContent = gameState.wave;
                    document.getElementById('level').textContent = gameState.level;
                }
                
                function nextWave() {
                    gameState.wave++;
                    if (gameState.wave % 5 === 0) {
                        gameState.level++;
                    }
                    
                    // Show wave cleared message briefly
                    document.getElementById('winMessage').style.display = 'block';
                    setTimeout(() => {
                        document.getElementById('winMessage').style.display = 'none';
                        createAliens();
                    }, 2000);
                    
                    playSound(600, 0.3, 'sine');
                }
                
                function gameOver() {
                    gameState.gameOver = true;
                    document.getElementById('finalScore').textContent = gameState.score.toLocaleString();
                    document.getElementById('finalWave').textContent = gameState.wave;
                    document.getElementById('gameOverMessage').style.display = 'block';
                    playSound(200, 1, 'sawtooth');
                }
                
                function restartGame() {
                    gameState = {
                        score: 0,
                        lives: 3,
                        wave: 1,
                        level: 1,
                        gameOver: false,
                        paused: false,
                        combo: 0,
                        maxCombo: 0
                    };
                    
                    player.x = canvas.width / 2 - 25;
                    bullets = [];
                    alienBullets = [];
                    particles = [];
                    explosions = [];
                    
                    createAliens();
                    document.getElementById('gameOverMessage').style.display = 'none';
                    updateUI();
                }
                
                function gameLoop() {
                    update();
                    draw();
                    requestAnimationFrame(gameLoop);
                }
                
                // Initialize and start game
                initStars();
                createAliens();
                updateUI();
                gameLoop();
                
                // Auto-focus canvas
                setTimeout(() => canvas.focus(), 100);
            </script>
        </body>
        </html>
        EOF
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './public'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
